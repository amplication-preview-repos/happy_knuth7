/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CellService } from "../cell.service";
import { CellCreateInput } from "./CellCreateInput";
import { Cell } from "./Cell";
import { CellFindManyArgs } from "./CellFindManyArgs";
import { CellWhereUniqueInput } from "./CellWhereUniqueInput";
import { CellUpdateInput } from "./CellUpdateInput";

export class CellControllerBase {
  constructor(protected readonly service: CellService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Cell })
  async createCell(@common.Body() data: CellCreateInput): Promise<Cell> {
    return await this.service.createCell({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        cellValue: true,
        cellType: true,
        cellReference: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Cell] })
  @ApiNestedQuery(CellFindManyArgs)
  async cells(@common.Req() request: Request): Promise<Cell[]> {
    const args = plainToClass(CellFindManyArgs, request.query);
    return this.service.cells({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        cellValue: true,
        cellType: true,
        cellReference: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Cell })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async cell(
    @common.Param() params: CellWhereUniqueInput
  ): Promise<Cell | null> {
    const result = await this.service.cell({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        cellValue: true,
        cellType: true,
        cellReference: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Cell })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCell(
    @common.Param() params: CellWhereUniqueInput,
    @common.Body() data: CellUpdateInput
  ): Promise<Cell | null> {
    try {
      return await this.service.updateCell({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          cellValue: true,
          cellType: true,
          cellReference: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Cell })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCell(
    @common.Param() params: CellWhereUniqueInput
  ): Promise<Cell | null> {
    try {
      return await this.service.deleteCell({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          cellValue: true,
          cellType: true,
          cellReference: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
