/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Cell } from "./Cell";
import { CellCountArgs } from "./CellCountArgs";
import { CellFindManyArgs } from "./CellFindManyArgs";
import { CellFindUniqueArgs } from "./CellFindUniqueArgs";
import { CreateCellArgs } from "./CreateCellArgs";
import { UpdateCellArgs } from "./UpdateCellArgs";
import { DeleteCellArgs } from "./DeleteCellArgs";
import { CellService } from "../cell.service";
@graphql.Resolver(() => Cell)
export class CellResolverBase {
  constructor(protected readonly service: CellService) {}

  async _cellsMeta(
    @graphql.Args() args: CellCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Cell])
  async cells(@graphql.Args() args: CellFindManyArgs): Promise<Cell[]> {
    return this.service.cells(args);
  }

  @graphql.Query(() => Cell, { nullable: true })
  async cell(@graphql.Args() args: CellFindUniqueArgs): Promise<Cell | null> {
    const result = await this.service.cell(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Cell)
  async createCell(@graphql.Args() args: CreateCellArgs): Promise<Cell> {
    return await this.service.createCell({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Cell)
  async updateCell(@graphql.Args() args: UpdateCellArgs): Promise<Cell | null> {
    try {
      return await this.service.updateCell({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Cell)
  async deleteCell(@graphql.Args() args: DeleteCellArgs): Promise<Cell | null> {
    try {
      return await this.service.deleteCell(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
