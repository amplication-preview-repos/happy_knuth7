/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Cell as PrismaCell } from "@prisma/client";

export class CellServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CellCountArgs, "select">): Promise<number> {
    return this.prisma.cell.count(args);
  }

  async cells(args: Prisma.CellFindManyArgs): Promise<PrismaCell[]> {
    return this.prisma.cell.findMany(args);
  }
  async cell(args: Prisma.CellFindUniqueArgs): Promise<PrismaCell | null> {
    return this.prisma.cell.findUnique(args);
  }
  async createCell(args: Prisma.CellCreateArgs): Promise<PrismaCell> {
    return this.prisma.cell.create(args);
  }
  async updateCell(args: Prisma.CellUpdateArgs): Promise<PrismaCell> {
    return this.prisma.cell.update(args);
  }
  async deleteCell(args: Prisma.CellDeleteArgs): Promise<PrismaCell> {
    return this.prisma.cell.delete(args);
  }
}
