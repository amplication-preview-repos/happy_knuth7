/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ExcelFile as PrismaExcelFile } from "@prisma/client";
import { UploadExcelInput } from "../UploadExcelInput";

export class ExcelFileServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ExcelFileCountArgs, "select">
  ): Promise<number> {
    return this.prisma.excelFile.count(args);
  }

  async excelFiles(
    args: Prisma.ExcelFileFindManyArgs
  ): Promise<PrismaExcelFile[]> {
    return this.prisma.excelFile.findMany(args);
  }
  async excelFile(
    args: Prisma.ExcelFileFindUniqueArgs
  ): Promise<PrismaExcelFile | null> {
    return this.prisma.excelFile.findUnique(args);
  }
  async createExcelFile(
    args: Prisma.ExcelFileCreateArgs
  ): Promise<PrismaExcelFile> {
    return this.prisma.excelFile.create(args);
  }
  async updateExcelFile(
    args: Prisma.ExcelFileUpdateArgs
  ): Promise<PrismaExcelFile> {
    return this.prisma.excelFile.update(args);
  }
  async deleteExcelFile(
    args: Prisma.ExcelFileDeleteArgs
  ): Promise<PrismaExcelFile> {
    return this.prisma.excelFile.delete(args);
  }
  async ConvertExcelToHtml(args: UploadExcelInput): Promise<string> {
    throw new Error("Not implemented");
  }
  async UploadExcelFile(args: UploadExcelInput): Promise<UploadExcelInput> {
    throw new Error("Not implemented");
  }
}
