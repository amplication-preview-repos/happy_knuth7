/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FormulaResultService } from "../formulaResult.service";
import { FormulaResultCreateInput } from "./FormulaResultCreateInput";
import { FormulaResult } from "./FormulaResult";
import { FormulaResultFindManyArgs } from "./FormulaResultFindManyArgs";
import { FormulaResultWhereUniqueInput } from "./FormulaResultWhereUniqueInput";
import { FormulaResultUpdateInput } from "./FormulaResultUpdateInput";

export class FormulaResultControllerBase {
  constructor(protected readonly service: FormulaResultService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FormulaResult })
  async createFormulaResult(
    @common.Body() data: FormulaResultCreateInput
  ): Promise<FormulaResult> {
    return await this.service.createFormulaResult({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        formulaReference: true,
        formulaResult: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FormulaResult] })
  @ApiNestedQuery(FormulaResultFindManyArgs)
  async formulaResults(
    @common.Req() request: Request
  ): Promise<FormulaResult[]> {
    const args = plainToClass(FormulaResultFindManyArgs, request.query);
    return this.service.formulaResults({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        formulaReference: true,
        formulaResult: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FormulaResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async formulaResult(
    @common.Param() params: FormulaResultWhereUniqueInput
  ): Promise<FormulaResult | null> {
    const result = await this.service.formulaResult({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        formulaReference: true,
        formulaResult: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FormulaResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFormulaResult(
    @common.Param() params: FormulaResultWhereUniqueInput,
    @common.Body() data: FormulaResultUpdateInput
  ): Promise<FormulaResult | null> {
    try {
      return await this.service.updateFormulaResult({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          formulaReference: true,
          formulaResult: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FormulaResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFormulaResult(
    @common.Param() params: FormulaResultWhereUniqueInput
  ): Promise<FormulaResult | null> {
    try {
      return await this.service.deleteFormulaResult({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          formulaReference: true,
          formulaResult: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
