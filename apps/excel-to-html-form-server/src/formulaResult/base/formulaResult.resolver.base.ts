/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { FormulaResult } from "./FormulaResult";
import { FormulaResultCountArgs } from "./FormulaResultCountArgs";
import { FormulaResultFindManyArgs } from "./FormulaResultFindManyArgs";
import { FormulaResultFindUniqueArgs } from "./FormulaResultFindUniqueArgs";
import { CreateFormulaResultArgs } from "./CreateFormulaResultArgs";
import { UpdateFormulaResultArgs } from "./UpdateFormulaResultArgs";
import { DeleteFormulaResultArgs } from "./DeleteFormulaResultArgs";
import { FormulaResultService } from "../formulaResult.service";
@graphql.Resolver(() => FormulaResult)
export class FormulaResultResolverBase {
  constructor(protected readonly service: FormulaResultService) {}

  async _formulaResultsMeta(
    @graphql.Args() args: FormulaResultCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FormulaResult])
  async formulaResults(
    @graphql.Args() args: FormulaResultFindManyArgs
  ): Promise<FormulaResult[]> {
    return this.service.formulaResults(args);
  }

  @graphql.Query(() => FormulaResult, { nullable: true })
  async formulaResult(
    @graphql.Args() args: FormulaResultFindUniqueArgs
  ): Promise<FormulaResult | null> {
    const result = await this.service.formulaResult(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FormulaResult)
  async createFormulaResult(
    @graphql.Args() args: CreateFormulaResultArgs
  ): Promise<FormulaResult> {
    return await this.service.createFormulaResult({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => FormulaResult)
  async updateFormulaResult(
    @graphql.Args() args: UpdateFormulaResultArgs
  ): Promise<FormulaResult | null> {
    try {
      return await this.service.updateFormulaResult({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FormulaResult)
  async deleteFormulaResult(
    @graphql.Args() args: DeleteFormulaResultArgs
  ): Promise<FormulaResult | null> {
    try {
      return await this.service.deleteFormulaResult(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
