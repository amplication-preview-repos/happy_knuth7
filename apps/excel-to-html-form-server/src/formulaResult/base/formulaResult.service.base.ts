/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, FormulaResult as PrismaFormulaResult } from "@prisma/client";

export class FormulaResultServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FormulaResultCountArgs, "select">
  ): Promise<number> {
    return this.prisma.formulaResult.count(args);
  }

  async formulaResults(
    args: Prisma.FormulaResultFindManyArgs
  ): Promise<PrismaFormulaResult[]> {
    return this.prisma.formulaResult.findMany(args);
  }
  async formulaResult(
    args: Prisma.FormulaResultFindUniqueArgs
  ): Promise<PrismaFormulaResult | null> {
    return this.prisma.formulaResult.findUnique(args);
  }
  async createFormulaResult(
    args: Prisma.FormulaResultCreateArgs
  ): Promise<PrismaFormulaResult> {
    return this.prisma.formulaResult.create(args);
  }
  async updateFormulaResult(
    args: Prisma.FormulaResultUpdateArgs
  ): Promise<PrismaFormulaResult> {
    return this.prisma.formulaResult.update(args);
  }
  async deleteFormulaResult(
    args: Prisma.FormulaResultDeleteArgs
  ): Promise<PrismaFormulaResult> {
    return this.prisma.formulaResult.delete(args);
  }
}
